# ==================================================================
# MLOps-Enhanced Docker Compose for USDCOP Trading System
# ==================================================================
# This configuration includes automated bucket provisioning and
# infrastructure-as-code management for the trading system
# ==================================================================

version: '3.8'

services:
  # ===============================
  # MinIO Object Storage
  # ===============================
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: usdcop-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin123}
      - MINIO_BROWSER_REDIRECT_URL=http://minio.usdcop.local
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    networks:
      - usdcop-network
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s
    labels:
      - "mlops.service=object-storage"
      - "mlops.layer=infrastructure"

  # ===============================
  # Bucket Provisioner Init Container
  # ===============================
  bucket-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.bucket-init
    container_name: usdcop-bucket-init
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - CONFIG_DIR=/app/config
      - BUCKET_CONFIG_FILE=minio-buckets.yaml
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - usdcop-network
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./config:/app/config:ro
      - bucket-init-logs:/tmp/logs
    labels:
      - "mlops.service=bucket-provisioner"
      - "mlops.layer=infrastructure"
      - "mlops.type=init-container"

  # ===============================
  # PostgreSQL Database
  # ===============================
  postgres:
    image: postgres:15-alpine
    container_name: usdcop-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=usdcop_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - usdcop-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d usdcop_trading"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "mlops.service=database"
      - "mlops.layer=infrastructure"

  # ===============================
  # Redis Cache & Message Broker
  # ===============================
  redis:
    image: redis:7-alpine
    container_name: usdcop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - usdcop-network
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    sysctls:
      - net.core.somaxconn=511
    labels:
      - "mlops.service=cache"
      - "mlops.layer=infrastructure"

  # ===============================
  # Apache Airflow with Bucket Dependencies
  # ===============================
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-webserver
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      # MinIO/S3 Configuration for Airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - AIRFLOW__LOGGING__REMOTE_LOGGING=True
      - AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER=s3://airflow/logs
      - AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID=minio_default
    networks:
      - usdcop-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bucket-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins:ro
      - airflow-data:/opt/airflow
      - ./config:/opt/airflow/config:ro
    command: webserver
    labels:
      - "mlops.service=orchestration"
      - "mlops.layer=platform"
      - "mlops.component=webserver"

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-scheduler
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      # MinIO/S3 Configuration
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - AIRFLOW__LOGGING__REMOTE_LOGGING=True
      - AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER=s3://airflow/logs
      - AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID=minio_default
    networks:
      - usdcop-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bucket-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins:ro
      - airflow-data:/opt/airflow
      - ./config:/opt/airflow/config:ro
    command: scheduler
    labels:
      - "mlops.service=orchestration"
      - "mlops.layer=platform"
      - "mlops.component=scheduler"

  # ===============================
  # MLflow Model Registry & Experiment Tracking
  # ===============================
  mlflow:
    image: mlflow/mlflow:2.9.2
    container_name: usdcop-mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:${MLFLOW_PASSWORD}@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow/artifacts
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
    networks:
      - usdcop-network
    depends_on:
      postgres:
        condition: service_healthy
      bucket-init:
        condition: service_completed_successfully
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:${MLFLOW_PASSWORD}@postgres:5432/mlflow
      --default-artifact-root s3://mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    labels:
      - "mlops.service=model-registry"
      - "mlops.layer=platform"

  # ===============================
  # Frontend Trading Dashboard
  # ===============================
  trading-dashboard:
    build:
      context: ./usdcop-trading-dashboard
      dockerfile: Dockerfile.professional-working
    container_name: usdcop-trading-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - API_BASE_URL=http://localhost:8000
      - WS_URL=ws://localhost:8000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
    networks:
      - usdcop-network
    depends_on:
      bucket-init:
        condition: service_completed_successfully
    volumes:
      - dashboard-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.usdcop.local`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3000"
      - "mlops.service=dashboard"
      - "mlops.layer=application"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===============================
  # InfluxDB (Time Series Database)
  # ===============================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: usdcop-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=usdcop_timeseries
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_HTTP_AUTH_ENABLED=true
    networks:
      - usdcop-network
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mlops.service=timeseries-db"
      - "mlops.layer=infrastructure"

  # ===============================
  # Infrastructure Validation Service
  # ===============================
  infrastructure-validator:
    build:
      context: .
      dockerfile: docker/Dockerfile.bucket-init
    container_name: usdcop-infra-validator
    restart: "no"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - CONFIG_DIR=/app/config
      - BUCKET_CONFIG_FILE=minio-buckets.yaml
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - usdcop-network
    depends_on:
      bucket-init:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
    volumes:
      - ./config:/app/config:ro
      - validation-reports:/tmp/reports
    command: >
      sh -c "
        echo 'Running infrastructure validation...' &&
        python3 /app/scripts/mlops/bucket_provisioner.py 
          --config /app/config/minio-buckets.yaml 
          --environment ${ENVIRONMENT:-production} 
          --action validate 
          --output /tmp/reports/validation_$(date +%Y%m%d_%H%M%S).json 
          --verbose
      "
    labels:
      - "mlops.service=infrastructure-validator"
      - "mlops.layer=platform"
      - "mlops.type=validation"

  # ===============================
  # Monitoring & Observability
  # ===============================
  prometheus:
    image: prom/prometheus:latest
    container_name: usdcop-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - usdcop-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - minio
      - influxdb
    labels:
      - "mlops.service=monitoring"
      - "mlops.layer=observability"

  grafana:
    image: grafana/grafana:latest
    container_name: usdcop-grafana
    restart: unless-stopped
    ports:
      - "3100:3000"
    networks:
      - usdcop-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    labels:
      - "mlops.service=dashboards"
      - "mlops.layer=observability"

  # ===============================
  # Nginx Reverse Proxy
  # ===============================
  nginx:
    image: nginx:alpine
    container_name: usdcop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - usdcop-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - trading-dashboard
      - mlflow
      - grafana
    labels:
      - "traefik.enable=false"
      - "mlops.service=reverse-proxy"
      - "mlops.layer=infrastructure"

# ===============================
# Networks
# ===============================
networks:
  usdcop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "mlops.network=main"

# ===============================
# Volumes
# ===============================
volumes:
  # Data persistence
  postgres-data:
    driver: local
    labels:
      - "mlops.volume=database"
  redis-data:
    driver: local
    labels:
      - "mlops.volume=cache"
  minio-data:
    driver: local
    labels:
      - "mlops.volume=object-storage"
  influxdb-data:
    driver: local
    labels:
      - "mlops.volume=timeseries"
  influxdb-config:
    driver: local
    labels:
      - "mlops.volume=timeseries-config"
  
  # Application data
  airflow-data:
    driver: local
    labels:
      - "mlops.volume=orchestration"
  prometheus-data:
    driver: local
    labels:
      - "mlops.volume=monitoring"
  grafana-data:
    driver: local
    labels:
      - "mlops.volume=dashboards"
  
  # Logs and temporary data
  dashboard-logs:
    driver: local
    labels:
      - "mlops.volume=logs"
  nginx-logs:
    driver: local
    labels:
      - "mlops.volume=logs"
  bucket-init-logs:
    driver: local
    labels:
      - "mlops.volume=logs"
  validation-reports:
    driver: local
    labels:
      - "mlops.volume=reports"