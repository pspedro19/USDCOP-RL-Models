# Complete USDCOP Trading System with Professional Dashboard
# Usage: docker-compose -f docker-compose.complete.yml up -d

version: '3.9'
name: usdcop-complete-system

services:
  # ================================
  # PROFESSIONAL TRADING DASHBOARD
  # ================================
  trading-dashboard:
    build:
      context: ./usdcop-trading-dashboard
      dockerfile: Dockerfile.auto-working
    container_name: usdcop-professional-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: 0.0.0.0
      # Connect to other services
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - usdcop-network

  # ================================
  # DATABASE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: usdcop-postgres-complete
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: usdcop_trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d usdcop_trading"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - usdcop-network

  # ================================
  # CACHE & MESSAGE BROKER
  # ================================
  redis:
    image: redis:7-alpine
    container_name: usdcop-redis-complete
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - usdcop-network

  # ================================
  # OBJECT STORAGE
  # ================================
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: usdcop-minio-complete
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - usdcop-network

  # ================================
  # MONITORING
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: usdcop-prometheus-complete
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - usdcop-network

  grafana:
    image: grafana/grafana:latest
    container_name: usdcop-grafana-complete
    restart: unless-stopped
    ports:
      - "3100:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - usdcop-network

networks:
  usdcop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local