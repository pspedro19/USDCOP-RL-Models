version: '3.8'

networks:
  usdcop-trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16

volumes:
  postgres_data:
  redis_data:
  minio_data:
  airflow_logs:
  airflow_dags:
  airflow_plugins:
  prometheus_data:
  grafana_data:

services:
  # Infrastructure Services
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: usdcop-postgres-timescale
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_DB: ${POSTGRES_DB:-usdcop_trading}
      TIMESCALEDB_TELEMETRY: 'off'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      usdcop-trading-network:
        aliases:
          - postgres
          - usdcop-postgres-timescale
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: usdcop-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: usdcop-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MinIO Bucket Initialization
  minio-init:
    image: minio/mc:latest
    container_name: usdcop-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...' &&
      sleep 5 &&
      mc alias set minio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY} &&
      echo 'MinIO alias configured successfully' &&
      echo 'Creating data pipeline buckets...' &&
      mc mb --ignore-existing minio/00-raw-usdcop-marketdata &&
      mc mb --ignore-existing minio/01-l1-ds-usdcop-standardize &&
      mc mb --ignore-existing minio/02-l2-ds-usdcop-prepare &&
      mc mb --ignore-existing minio/03-l3-ds-usdcop-feature &&
      mc mb --ignore-existing minio/04-l4-ds-usdcop-rlready &&
      mc mb --ignore-existing minio/05-l5-ds-usdcop-serving &&
      echo 'Creating additional RL buckets...' &&
      mc mb --ignore-existing minio/usdcop-l4-rlready &&
      mc mb --ignore-existing minio/usdcop-l5-serving &&
      mc mb --ignore-existing minio/usdcop-l6-backtest &&
      echo 'Creating common buckets...' &&
      mc mb --ignore-existing minio/99-common-trading-models &&
      mc mb --ignore-existing minio/99-common-trading-reports &&
      mc mb --ignore-existing minio/99-common-trading-backups &&
      echo 'Setting bucket policies for public download access...' &&
      mc anonymous set download minio/00-raw-usdcop-marketdata || true &&
      mc anonymous set download minio/99-common-trading-reports || true &&
      echo 'All buckets created successfully!' &&
      echo 'Final bucket list:' &&
      mc ls minio &&
      echo 'MinIO initialization completed.'
      "
    networks:
      - usdcop-trading-network
    restart: "no"

  # Airflow Services
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-Fernet.generate_key()}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-your-secret-key}
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-admin123}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/configs:/opt/airflow/configs
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@admin.com --password admin123 &&
      pip install -r /opt/airflow/configs/../requirements.txt || true
      "
    networks:
      - usdcop-trading-network
    restart: "no"

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-Fernet.generate_key()}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-your-secret-key}
      # TwelveData API Keys for L0 Pipeline
      TWELVEDATA_API_KEY_1: ${TWELVEDATA_API_KEY_1}
      TWELVEDATA_API_KEY_2: ${TWELVEDATA_API_KEY_2}
      TWELVEDATA_API_KEY_3: ${TWELVEDATA_API_KEY_3}
      TWELVEDATA_API_KEY_4: ${TWELVEDATA_API_KEY_4}
      TWELVEDATA_API_KEY_5: ${TWELVEDATA_API_KEY_5}
      TWELVEDATA_API_KEY_6: ${TWELVEDATA_API_KEY_6}
      TWELVEDATA_API_KEY_7: ${TWELVEDATA_API_KEY_7}
      TWELVEDATA_API_KEY_8: ${TWELVEDATA_API_KEY_8}
      # Enhanced L0 Pipeline - Group 1 API Keys
      API_KEY_G1_1: ${API_KEY_G1_1}
      API_KEY_G1_2: ${API_KEY_G1_2}
      API_KEY_G1_3: ${API_KEY_G1_3}
      API_KEY_G1_4: ${API_KEY_G1_4}
      API_KEY_G1_5: ${API_KEY_G1_5}
      API_KEY_G1_6: ${API_KEY_G1_6}
      API_KEY_G1_7: ${API_KEY_G1_7}
      API_KEY_G1_8: ${API_KEY_G1_8}
      # Enhanced L0 Pipeline - Group 2 API Keys
      API_KEY_G2_1: ${API_KEY_G2_1}
      API_KEY_G2_2: ${API_KEY_G2_2}
      API_KEY_G2_3: ${API_KEY_G2_3}
      API_KEY_G2_4: ${API_KEY_G2_4}
      API_KEY_G2_5: ${API_KEY_G2_5}
      API_KEY_G2_6: ${API_KEY_G2_6}
      API_KEY_G2_7: ${API_KEY_G2_7}
      API_KEY_G2_8: ${API_KEY_G2_8}
      # MinIO/AWS Configuration for L0 Pipeline
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_DEFAULT_REGION: us-east-1
      AWS_ENDPOINT_URL: http://minio:9000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/configs:/opt/airflow/configs
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    command: airflow scheduler
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "/opt/airflow/configs/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-webserver
    depends_on:
      airflow-scheduler:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-Fernet.generate_key()}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-your-secret-key}
      # TwelveData API Keys for L0 Pipeline
      TWELVEDATA_API_KEY_1: ${TWELVEDATA_API_KEY_1}
      TWELVEDATA_API_KEY_2: ${TWELVEDATA_API_KEY_2}
      TWELVEDATA_API_KEY_3: ${TWELVEDATA_API_KEY_3}
      TWELVEDATA_API_KEY_4: ${TWELVEDATA_API_KEY_4}
      TWELVEDATA_API_KEY_5: ${TWELVEDATA_API_KEY_5}
      TWELVEDATA_API_KEY_6: ${TWELVEDATA_API_KEY_6}
      TWELVEDATA_API_KEY_7: ${TWELVEDATA_API_KEY_7}
      TWELVEDATA_API_KEY_8: ${TWELVEDATA_API_KEY_8}
      # Enhanced L0 Pipeline - Group 1 API Keys
      API_KEY_G1_1: ${API_KEY_G1_1}
      API_KEY_G1_2: ${API_KEY_G1_2}
      API_KEY_G1_3: ${API_KEY_G1_3}
      API_KEY_G1_4: ${API_KEY_G1_4}
      API_KEY_G1_5: ${API_KEY_G1_5}
      API_KEY_G1_6: ${API_KEY_G1_6}
      API_KEY_G1_7: ${API_KEY_G1_7}
      API_KEY_G1_8: ${API_KEY_G1_8}
      # Enhanced L0 Pipeline - Group 2 API Keys
      API_KEY_G2_1: ${API_KEY_G2_1}
      API_KEY_G2_2: ${API_KEY_G2_2}
      API_KEY_G2_3: ${API_KEY_G2_3}
      API_KEY_G2_4: ${API_KEY_G2_4}
      API_KEY_G2_5: ${API_KEY_G2_5}
      API_KEY_G2_6: ${API_KEY_G2_6}
      API_KEY_G2_7: ${API_KEY_G2_7}
      API_KEY_G2_8: ${API_KEY_G2_8}
      # MinIO/AWS Configuration for L0 Pipeline
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_DEFAULT_REGION: us-east-1
      AWS_ENDPOINT_URL: http://minio:9000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/configs:/opt/airflow/configs
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: airflow webserver
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # airflow-worker: Not needed with LocalExecutor - tasks run within scheduler process
  # Commented out to prevent restart loops since LocalExecutor doesn't support celery worker command

  # USDCOP Real-time Orchestrator (Main Service)
  usdcop-realtime-orchestrator:
    build:
      context: ./services
      dockerfile: Dockerfile.orchestrator
    container_name: usdcop-realtime-orchestrator
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-scheduler:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      LOG_LEVEL: INFO
      TWELVEDATA_API_KEY_1: ${TWELVEDATA_API_KEY_1}
      PORT: 8080
    ports:
      - "8085:8080"
    networks:
      - usdcop-trading-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Enhanced USDCOP Real-time Service (Backup/Alternative)
  usdcop-realtime-service:
    build:
      context: ./services
      dockerfile: Dockerfile.usdcop-realtime
    container_name: usdcop-enhanced-realtime
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      LOG_LEVEL: INFO
      MARKET_START_HOUR: 8
      MARKET_END_HOUR: 12
      MARKET_END_MINUTE: 55
      SYNC_INTERVAL_MINUTES: 5
      TWELVEDATA_API_KEY_1: ${TWELVEDATA_API_KEY_1}
      PORT: 8080
    ports:
      - "8084:8080"
    networks:
      - usdcop-trading-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    profiles:
      - backup  # Only start when backup profile is activated

  # Legacy Real-time Data Service (kept for compatibility)
  realtime-data-service:
    build:
      context: ./services
      dockerfile: Dockerfile.realtime
    container_name: usdcop-realtime-data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      LOG_LEVEL: INFO
      MARKET_HOURS_START: "08:00"

  # Optimized L0 Validator Service with 16 API Keys
  optimized-l0-validator:
    build:
      context: ./services
      dockerfile: Dockerfile.optimized-l0
    container_name: usdcop-optimized-l0-validator
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      # TwelveData API Keys - GRUPO 1
      API_KEY_G1_1: ${API_KEY_G1_1:-7bb5ad48501b4a6ea9fbedba2b0247f9}
      API_KEY_G1_2: ${API_KEY_G1_2:-21de7ed341dc4ad5a20c292cee4652cb}
      API_KEY_G1_3: ${API_KEY_G1_3:-06f4622c4cfd4fd78795777367bb07d6}
      API_KEY_G1_4: ${API_KEY_G1_4:-0cabdba116f2415c82f7922c704427d9}
      API_KEY_G1_5: ${API_KEY_G1_5:-93104476650b4d25aaf033ce06585ba2}
      API_KEY_G1_6: ${API_KEY_G1_6:-9c61d83999c949d9866d92661f0f7c25}
      API_KEY_G1_7: ${API_KEY_G1_7:-3d465022bf0c489f84270d5f1cd771b9}
      API_KEY_G1_8: ${API_KEY_G1_8:-46d5e594b4af4282a935e1b1da8edc19}
      # TwelveData API Keys - GRUPO 2
      API_KEY_G2_1: ${API_KEY_G2_1:-bf67096c644f4d20821540de2ad344dc}
      API_KEY_G2_2: ${API_KEY_G2_2:-a752322b9f3d44328a61cb53c24666b6}
      API_KEY_G2_3: ${API_KEY_G2_3:-69f2c0d75209451981be8d208204ea13}
      API_KEY_G2_4: ${API_KEY_G2_4:-b3faeff15a634855aab906858d2c8486}
      API_KEY_G2_5: ${API_KEY_G2_5:-e56b2aec322e4fe1b2b43bb419d5fde8}
      API_KEY_G2_6: ${API_KEY_G2_6:-fabe96c251694ab38a0c4a794244ae58}
      API_KEY_G2_7: ${API_KEY_G2_7:-c6d60eefb2b347f8a94f3cbc919fc33a}
      API_KEY_G2_8: ${API_KEY_G2_8:-e0cd278e177a469ba91992f1487c9c0e}
      # Service Configuration
      LOG_LEVEL: INFO
      PORT: 8086
      TIMEZONE: America/Bogota
      MARKET_START_HOUR: 8
      MARKET_START_MINUTE: 0
      MARKET_END_HOUR: 12
      MARKET_END_MINUTE: 55
      MIN_COMPLETENESS: 95.0
      BATCH_SIZE: 1000
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Health Monitor Service
  health-monitor:
    build:
      context: ./services
      dockerfile: Dockerfile.health
    container_name: usdcop-health-monitor
    environment:
      LOG_LEVEL: INFO
    ports:
      - "8083:8080"
    networks:
      - usdcop-trading-network
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker commands
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # WebSocket Service
  websocket-service:
    build:
      context: ./services
      dockerfile: Dockerfile.websocket
    container_name: usdcop-websocket
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      LOG_LEVEL: INFO
      CORS_ORIGINS: "http://localhost:5000,http://localhost:80"
    ports:
      - "8082:8080"
    networks:
      - usdcop-trading-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: usdcop-pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@trading.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./pgadmin/pgpass:/pgpass:ro
    ports:
      - "5050:80"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "-q", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Trading Dashboard
  dashboard:
    build:
      context: ./usdcop-trading-dashboard
      dockerfile: Dockerfile.prod
    container_name: usdcop-dashboard
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-usdcop_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_TRADING_API_URL: http://usdcop-trading-api:8000/api
      TRADING_API_URL: http://usdcop-trading-api:8000
    ports:
      - "5000:3000"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: usdcop-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: usdcop-grafana
    depends_on:
      prometheus:
        condition: service_healthy
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Trading API Service
  trading-api:
    build:
      context: ./services
      dockerfile: Dockerfile.trading-api
    container_name: usdcop-trading-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-usdcop_trading}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - CORS_ORIGINS=http://localhost:5000,http://localhost:3001
    ports:
      - "8000:8000"
    networks:
      - usdcop-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: usdcop-nginx
    depends_on:
      dashboard:
        condition: service_healthy
      airflow-webserver:
        condition: service_started
      trading-api:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - usdcop-trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped