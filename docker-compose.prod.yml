# Production Docker Compose for USDCOP RL Trading System
version: '3.8'

services:
  # ===============================
  # Frontend Trading Dashboard
  # ===============================
  trading-dashboard:
    build:
      context: ./usdcop-trading-dashboard
      dockerfile: Dockerfile.professional-working
    container_name: usdcop-trading-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - API_BASE_URL=http://localhost:8000
      - WS_URL=ws://localhost:8000
    networks:
      - usdcop-network
    # depends_on:
    #   - redis
    volumes:
      - dashboard-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.usdcop.local`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===============================
  # Backend API Server (Disabled - not implemented yet)
  # ===============================
  # backend-api:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.prod
  #   container_name: usdcop-backend-api
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - ENVIRONMENT=production
  #     - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/usdcop_trading
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #     - JWT_SECRET=${JWT_SECRET}
  #     - API_RATE_LIMIT=1000
  #   networks:
  #     - usdcop-network
  #   depends_on:
  #     - postgres
  #     - redis
  #     - minio
  #   volumes:
  #     - api-logs:/app/logs
  #     - ./models:/app/models:ro
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.api.rule=Host(`api.usdcop.local`)"
  #     - "traefik.http.services.api.loadbalancer.server.port=8000"

  # ===============================
  # PostgreSQL Database
  # ===============================
  postgres:
    image: postgres:15-alpine
    container_name: usdcop-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=usdcop_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - usdcop-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d usdcop_trading"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===============================
  # Redis Cache & Message Broker
  # ===============================
  redis:
    image: redis:7-alpine
    container_name: usdcop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - usdcop-network
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    sysctls:
      - net.core.somaxconn=511

  # ===============================
  # MinIO Object Storage
  # ===============================
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: usdcop-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_BROWSER_REDIRECT_URL=http://minio.usdcop.local
    networks:
      - usdcop-network
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===============================
  # Apache Airflow (Data Pipeline)
  # ===============================
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-webserver
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    networks:
      - usdcop-network
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins:ro
      - airflow-data:/opt/airflow
    command: webserver

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile.prod
    container_name: usdcop-airflow-scheduler
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow:${AIRFLOW_PASSWORD}@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    networks:
      - usdcop-network
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins:ro
      - airflow-data:/opt/airflow
    command: scheduler

  # ===============================
  # InfluxDB (Time Series Database)
  # ===============================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: usdcop-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=usdcop_timeseries
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_HTTP_AUTH_ENABLED=true
    networks:
      - usdcop-network
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # Nginx Reverse Proxy
  # ===============================
  nginx:
    image: nginx:alpine
    container_name: usdcop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - usdcop-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - trading-dashboard
    labels:
      - "traefik.enable=false"

  # ===============================
  # Monitoring & Observability
  # ===============================
  prometheus:
    image: prom/prometheus:latest
    container_name: usdcop-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - usdcop-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: usdcop-grafana
    restart: unless-stopped
    ports:
      - "3100:3000"
    networks:
      - usdcop-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

# ===============================
# Networks
# ===============================
networks:
  usdcop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================
# Volumes
# ===============================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  airflow-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  dashboard-logs:
    driver: local
  api-logs:
    driver: local
  nginx-logs:
    driver: local