version: '3.9'
name: usdcop-trading-production

# ═══════════════════════════════════════════════════════════════════════════════
# USDCOP RL Trading System - Production Docker Compose
# ═══════════════════════════════════════════════════════════════════════════════
# 
# Complete production-ready orchestration for:
# - Data layer: PostgreSQL, Redis, MinIO
# - Processing layer: Airflow (webserver, scheduler, worker)
# - Application layer: Trading app, Dashboard
# - Observability: Prometheus, Grafana, Jaeger, Loki
# - Gateway: Nginx reverse proxy
# - Service discovery: Consul
#
# Features:
# - Deterministic startup order with health checks
# - Automated initialization containers
# - Persistent volume configurations
# - Network isolation and service discovery
# - Environment-specific configurations
# - Security hardening
# ═══════════════════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════════════════
# SHARED CONFIGURATIONS
# ═══════════════════════════════════════════════════════════════════════════════

x-common-variables: &common-variables
  TZ: ${TZ:-UTC}
  ENVIRONMENT: ${ENVIRONMENT:-production}

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# Airflow common configuration
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE:-apache/airflow:2.9.2}
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:${AIRFLOW_DB_PASSWORD}@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:${AIRFLOW_DB_PASSWORD}@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-apache-airflow-providers-amazon boto3 scipy pandas numpy scikit-learn matplotlib seaborn psycopg2-binary redis}
    <<: *common-variables
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags:ro
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins:ro
  networks:
    - trading-network
  logging: *default-logging

services:
  # ═══════════════════════════════════════════════════════════════════════════
  # INFRASTRUCTURE LAYER
  # ═══════════════════════════════════════════════════════════════════════════

  # Service Discovery and Configuration
  consul:
    image: hashicorp/consul:1.17
    container_name: trading-consul
    <<: *restart-policy
    command: >
      consul agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
      -datacenter=trading-dc1 -data-dir=/consul/data
      -log-level=INFO -enable-script-checks=false
    environment:
      CONSUL_BIND_INTERFACE: eth0
      <<: *common-variables
    ports:
      - "${CONSUL_HTTP_PORT:-8500}:8500"
      - "${CONSUL_DNS_PORT:-8600}:8600"
    volumes:
      - consul_data:/consul/data
      - consul_config:/consul/config
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # DATA PERSISTENCE LAYER
  # ═══════════════════════════════════════════════════════════════════════════

  # Primary Database
  postgres:
    image: postgres:16-alpine
    container_name: trading-postgres
    <<: *restart-policy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=peer"
      PGDATA: /var/lib/postgresql/data/pgdata
      <<: *common-variables
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - postgres_backups:/backups
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging: *default-logging
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    <<: *restart-policy
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      <<: *common-variables
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - redis_conf:/usr/local/etc/redis
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    logging: *default-logging

  # Object Storage
  minio:
    image: minio/minio:RELEASE.2024-08-03T04-33-23Z
    container_name: trading-minio
    <<: *restart-policy
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      <<: *common-variables
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # INITIALIZATION SERVICES
  # ═══════════════════════════════════════════════════════════════════════════

  # Database Initialization
  postgres-init:
    image: postgres:16-alpine
    container_name: trading-postgres-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      <<: *common-variables
    volumes:
      - ./init-scripts:/scripts:ro
    networks:
      - trading-network
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h postgres -U postgres; do
          echo 'PostgreSQL not ready, waiting...'
          sleep 2
        done
        echo 'PostgreSQL is ready, running additional initialization...'
        # Run any additional initialization scripts
        if [ -f /scripts/02-trading-schema.sql ]; then
          psql -h postgres -U postgres -d trading_db -f /scripts/02-trading-schema.sql
        fi
        echo 'Database initialization completed successfully'
      "
    logging: *default-logging

  # MinIO Bucket Initialization
  minio-init:
    image: minio/mc:RELEASE.2024-07-31T15-58-33Z
    container_name: trading-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      <<: *common-variables
    networks:
      - trading-network
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      set -e
      echo 'Configuring MinIO client...'
      mc alias set trading http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
      
      echo 'Creating data pipeline buckets...'
      mc mb -p trading/00-l0-ds-usdcop-acquire || true
      mc mb -p trading/01-l1-ds-usdcop-standardize || true
      mc mb -p trading/02-l2-ds-usdcop-prepare || true
      mc mb -p trading/03-l3-ds-usdcop-feature || true
      mc mb -p trading/04-l4-ds-usdcop-rlready || true
      mc mb -p trading/05-l5-ds-usdcop-serving || true
      
      echo 'Creating common buckets...'
      mc mb -p trading/models || true
      mc mb -p trading/reports || true
      mc mb -p trading/backups || true
      mc mb -p trading/logs || true
      
      echo 'Setting bucket policies...'
      mc anonymous set download trading/05-l5-ds-usdcop-serving || true
      mc anonymous set download trading/reports || true
      
      echo 'MinIO initialization completed successfully'
      "
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # WORKFLOW ORCHESTRATION LAYER
  # ═══════════════════════════════════════════════════════════════════════════

  # Airflow Database Migration and User Creation
  airflow-init:
    <<: *airflow-common
    container_name: trading-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        echo "Creating Airflow directories..."
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins}
        echo "Initializing Airflow database..."
        airflow db migrate
        echo "Creating Airflow admin user..."
        airflow users create \
          --username ${AIRFLOW_ADMIN_USER} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email ${AIRFLOW_ADMIN_EMAIL:-admin@trading.local} \
          --password ${AIRFLOW_ADMIN_PASSWORD}
        echo "Airflow initialization completed"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow:/sources
    networks:
      - trading-network
    logging: *default-logging

  # Airflow Web Server
  airflow-webserver:
    <<: *airflow-common
    container_name: trading-airflow-webserver
    command: webserver
    ports:
      - "${AIRFLOW_PORT:-8081}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      <<: *healthcheck-defaults
    <<: *restart-policy
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: trading-airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      <<: *healthcheck-defaults
    <<: *restart-policy
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    container_name: trading-airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      <<: *healthcheck-defaults
    <<: *restart-policy
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"

  # Airflow Flower (Celery Monitoring)
  airflow-flower:
    <<: *airflow-common
    container_name: trading-airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      <<: *healthcheck-defaults
    <<: *restart-policy
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ═══════════════════════════════════════════════════════════════════════════
  # APPLICATION LAYER
  # ═══════════════════════════════════════════════════════════════════════════

  # Trading Application Backend
  trading-app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_ENV: production
    image: usdcop-trading-app:${APP_VERSION:-latest}
    container_name: trading-app
    <<: *restart-policy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
      minio-init:
        condition: service_completed_successfully
    environment:
      # Application Configuration
      APP_ENV: ${APP_ENV:-production}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading
      DB_PASSWORD: ${DB_PASSWORD}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-30}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 1
      
      # MinIO Configuration
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_SECURE: "false"
      
      # Trading Configuration
      MT5_LOGIN: ${MT5_LOGIN}
      MT5_PASSWORD: ${MT5_PASSWORD}
      MT5_SERVER: ${MT5_SERVER}
      
      # Service Discovery
      CONSUL_HTTP_ADDR: http://consul:8500
      SERVICE_NAME: usdcop-trading-app
      SERVICE_PORT: 8000
      
      # Observability
      OTEL_SERVICE_NAME: usdcop-trading-app
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: "0.1"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=${APP_ENV},service.version=${APP_VERSION}"
      
      <<: *common-variables
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - model_cache:/app/models
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # Trading Dashboard Frontend
  trading-dashboard:
    build:
      context: ./usdcop-trading-dashboard
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    image: usdcop-trading-dashboard:${DASHBOARD_VERSION:-latest}
    container_name: trading-dashboard
    <<: *restart-policy
    depends_on:
      trading-app:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: 0.0.0.0
      
      # Backend API Configuration
      API_BASE_URL: http://trading-app:8000
      WS_URL: ws://trading-app:8000/ws
      
      # Database (for dashboard-specific features)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_db
      DB_USER: trading
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis (for real-time features)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      <<: *common-variables
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # OBSERVABILITY LAYER
  # ═══════════════════════════════════════════════════════════════════════════

  # Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: trading-prometheus
    <<: *restart-policy
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    environment:
      <<: *common-variables
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: trading-grafana
    <<: *restart-policy
    depends_on:
      prometheus:
        condition: service_healthy
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      <<: *common-variables
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: trading-jaeger
    <<: *restart-policy
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_OTLP_HTTP_ENABLED: "true"
      COLLECTOR_OTLP_GRPC_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
      <<: *common-variables
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    volumes:
      - jaeger_data:/tmp
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: trading-loki
    <<: *restart-policy
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      <<: *common-variables
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # Log Collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: trading-promtail
    <<: *restart-policy
    depends_on:
      loki:
        condition: service_healthy
    environment:
      <<: *common-variables
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - trading-network
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # GATEWAY AND LOAD BALANCING
  # ═══════════════════════════════════════════════════════════════════════════

  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: trading-nginx
    <<: *restart-policy
    depends_on:
      trading-app:
        condition: service_healthy
      trading-dashboard:
        condition: service_healthy
      grafana:
        condition: service_healthy
    environment:
      <<: *common-variables
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl:ro
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      <<: *healthcheck-defaults
    logging: *default-logging

  # ═══════════════════════════════════════════════════════════════════════════
  # DATABASE ADMINISTRATION
  # ═══════════════════════════════════════════════════════════════════════════

  # PostgreSQL Administration
  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: trading-pgadmin
    <<: *restart-policy
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      <<: *common-variables
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - trading-network
    logging: *default-logging

# ═══════════════════════════════════════════════════════════════════════════════
# VOLUMES
# ═══════════════════════════════════════════════════════════════════════════════

volumes:
  # Data Persistence
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/postgres
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DIR}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/redis
  redis_conf:
    driver: local
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/minio

  # Application Data
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/app
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_DIR}/app
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/models

  # Observability Data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/grafana
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/loki
  jaeger_data:
    driver: local

  # Service Configuration
  consul_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/consul
  consul_config:
    driver: local
  pgadmin_data:
    driver: local
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_DIR}/nginx
  ssl_certs:
    driver: local

# ═══════════════════════════════════════════════════════════════════════════════
# NETWORKS
# ═══════════════════════════════════════════════════════════════════════════════

networks:
  trading-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET:-172.28.0.0/16}
          gateway: ${GATEWAY:-172.28.0.1}
    driver_opts:
      com.docker.network.bridge.name: trading-br0
      com.docker.network.driver.mtu: 1500